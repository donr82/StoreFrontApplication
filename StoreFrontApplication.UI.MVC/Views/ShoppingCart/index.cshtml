@* ********* Shopping Cart Step 5. step 4 on ShoppingCartController
        created this view list no script ref
        We commented out the below because the datatype we will send to this view is a Dictionary

    @model IEnumerable<MVC3.UI.MVC.Models.CartItemViewModel>
*@
@model Dictionary<int, StoreFrontApplication.UI.MVC.Models.CartItemViewModel>

@{
    ViewBag.Title = "Shopping Cart";

    //Add some local variables for calculations on this page. (i.e. total cost, total # of items)
    decimal? cartTotal = 0;
    int totalCountOfItems = 0;
}
<section class="cart bg-light">
    <div>
        <p class="text-right">
            @Html.ActionLink("Back to Shopping", "Index", "Movies", null, new { @class = "btn btn-info" })
        </p>

        <h2 class="text-center">@ViewBag.Title</h2>

        @if (Model.Count == 0)
        {
            <p class="alert alert-warning">
                @ViewBag.Message
            </p>
        }
        else
        {

            <table class="table">
                <tr>
                    <th>Movie Image</th>
                    <th>Quantity</th>
                    <th>Title</th>
                    <th>Price</th>
                    <th>Total</th>
                    <th></th>
                </tr>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <img src="~/Content/imgstore/books/t_@item.Value.Product.MovieImage" alt="Movie Image" title="@item.Value.Product.MovieTitle" />
                        </td>
                        <td>
                            @using (Html.BeginForm("UpdateCart", "ShoppingCart", FormMethod.Post))
                            {
                                @Html.Hidden("movieID", item.Key)
                                @Html.TextBox("qty", item.Value.Qty, new { @class = "form-control", style = "max-width: 50px;display: inline;" })
                                <input type="submit" value="Update Quantity" class="btn btn-info" />
                            }

                            @{
                                //calculate the running total for the items in the cart
                                totalCountOfItems += item.Value.Qty;
                            }
                        </td>
                        <td>@item.Value.Product.MovieTitle</td>
                        @* Below is what we used to turn this into currency format *@
                        <td>@string.Format($"{item.Value.Product.Price:c}")</td>
                        <td>
                            @* Calculate the line total & running total variable (cartTotal) that keeps track of the cost of all items in the cart *@
                            @{
                                decimal? lineTotal = item.Value.Product.Price * item.Value.Qty;
                                cartTotal += lineTotal;
                            }

                            @string.Format($"{lineTotal:c}")
                        </td>
                        <td>
                            @Html.ActionLink("Remove from Cart", "RemoveFromCart", new { id = item.Key }, new { @class = "btn btn-danger" })

                        </td>
                    </tr>
                }

            </table>

            <p class="alert alert-success text-center" style="font-size: 1.25em;">
                You have @totalCountOfItems  item@(totalCountOfItems == 1 ? "" : "s") in your cart.
                Your total before taxes and shipping is @string.Format($"{cartTotal:c}").
            </p>
        }
    </div>
</section>

